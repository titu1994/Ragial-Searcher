{"name":"Ragial-searcher","tagline":"A Core Java library used to parse and store Ragial.com data","body":"# Ragial Searcher\r\n## What is it used for?\r\n\r\nRagial Searcher is a basic parser for a website, ragial.com, which is very helpful in searching items being vended in the game, Ragnarok Online. However, ragial.com does not provide any method to notify the user of when a specific item is in sale. This Java library is written to serve that purpose. It uses the Jsoup library to parse the site, and Gson to store that data in a Json format.\r\n\r\n## How is it used?\r\nThe library has a simple set of methods to use its functions. Note that unless the \"specific\" api is used, RagialQueryMatcher will return an array of all items which have names similar to the supplied argument.\r\n\r\n1) Get the RagialQueryMatcher object\r\n```\r\nRagialQueryMatcher matcher = RagialQueryMatcher.getMatcher();\r\n```\r\n\r\n2.1) Get the array of RagialData. searchRagial(name) returns a Future<RagialData[]> Object, so it is an asynchronous call. Use get() to wait until the thread finishes.\r\n```\r\nRagialData[] datas = matcher.searchRagial(name).get();\r\n```\r\n\r\n2.2) Get the specific RagialData. This will return only one result, however the name specified must be *EXACTLY* the same. Down to the spaces!\r\n```\r\nRagialData data = matcher.searchRagialSpecificly(name);\r\n```\r\n\r\n2.3) Get the specific RagialData, after already getting all similar search results as well. This will return only one result, however the name specified must be *EXACTLY* the same. Down to the spaces! Note this is a static method.\r\n```\r\nRagialData specificData = RagialQueryMatcher.searchRagialSpecificly(name, datas);\r\n```\r\n\r\n3.1.1) Get on sale items from a single Specific RagialData.\r\n```\r\nArrayList<VendingNow> sales = matcher.getOnSaleItems(name, specificData).get();\r\n```\r\n\r\n3.1.2) Get on sale items from an array of RagialData. This will first obtain the specific RagialData, then find all the VendingNow items which are on sale.\r\n```\r\n\r\n```\r\n\r\n3.2.1) Get on sale items from a single Specific RagialData, while searching over both the long and short range of Ragial data.\r\n```\r\nArrayList<VendingNow> sales = matcher.getOnSaleItems(name, specificData, true).get();\r\n``` \r\n\r\n4) Display the entire data\r\n```\r\nSystem.out.println(specificData);\r\n```\r\n\r\n4.1) Display only the vender data\r\n```\r\nSystem.out.println(specificData.toString(true));\r\n```\r\n\r\n## Wrap up\r\nTo just obtain the data and make it visible, a Jar is also included. \r\nDocumentation is also available to see which classes perform which task.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}